:py:mod:`HybLangParser`
=======================

.. py:module:: HybLangParser


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   HybLangParser.HybLangParser



Functions
~~~~~~~~~

.. autoapisummary::

   HybLangParser.serializedATN



.. py:function:: serializedATN()


.. py:class:: HybLangParser(input: antlr4.TokenStream, output: TextIO = sys.stdout)

   Bases: :py:obj:`antlr4.Parser`

   .. py:class:: ProgramContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: procedure(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Bin_opContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: IdentifierContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: String_literalContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: STRING_LITERAL(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Function_callContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: LPAREN(self)


      .. py:method:: RPAREN(self)


      .. py:method:: expression(self, i: int = None)


      .. py:method:: SEQSEP(self, i: int = None)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: ExpressionContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: LPAREN(self)


      .. py:method:: expression(self, i: int = None)


      .. py:method:: RPAREN(self)


      .. py:method:: NUMBER(self)


      .. py:method:: IDENTIFIER(self)


      .. py:method:: function_call(self)


      .. py:method:: bin_op(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: AssignmentContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: ASSIGN(self)


      .. py:method:: expression(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: SampleContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: SAMPLE(self)


      .. py:method:: set_type(self)


      .. py:method:: expression(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Return_stmtContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: expression(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: StatementContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: assignment(self)


      .. py:method:: sample(self)


      .. py:method:: return_stmt(self)


      .. py:method:: expression(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: ProcedureContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: non_statement(self, i: int = None)


      .. py:method:: query_statement(self, i: int = None)


      .. py:method:: statement(self, i: int = None)


      .. py:method:: SEPARATOR(self, i: int = None)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Non_statementContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: function_def(self)


      .. py:method:: if_stmt(self)


      .. py:method:: call_prog_def(self)


      .. py:method:: library_def(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Set_litContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: NUMBER(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Set_typeContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: LBRACK(self)


      .. py:method:: set_lit(self, i: int = None)


      .. py:method:: RBRACK(self)


      .. py:method:: SEQSEP(self, i: int = None)


      .. py:method:: LPAREN(self)


      .. py:method:: NUMBER(self)


      .. py:method:: RPAREN(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Function_argumentContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: BLOCKSTART(self)


      .. py:method:: set_type(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Function_argumentsContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: function_argument(self, i: int = None)


      .. py:method:: SEQSEP(self, i: int = None)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Function_defContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self)


      .. py:method:: LPAREN(self)


      .. py:method:: RPAREN(self)


      .. py:method:: block(self)


      .. py:method:: function_arguments(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: BlockContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: BLOCKSTART(self)


      .. py:method:: LBRACK(self)


      .. py:method:: procedure(self)


      .. py:method:: RBRACK(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: If_stmtContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: expression(self)


      .. py:method:: block(self, i: int = None)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Call_prog_defContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: LSQBRACK(self)


      .. py:method:: IDENTIFIER(self)


      .. py:method:: RSQBRACK(self)


      .. py:method:: block(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Exposing_sequenceContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: IDENTIFIER(self, i: int = None)


      .. py:method:: SEQSEP(self, i: int = None)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Library_defContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: LSQBRACK(self)


      .. py:method:: IDENTIFIER(self)


      .. py:method:: RSQBRACK(self)


      .. py:method:: block(self)


      .. py:method:: LPAREN(self)


      .. py:method:: RPAREN(self)


      .. py:method:: exposing_sequence(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Query_statementContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: show_query_statement(self)


      .. py:method:: write_query_statement(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Show_query_statementContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: query_expression(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Write_query_statementContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: string_literal(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Query_relationContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:class:: Query_expressionContext(parser, parent: antlr4.ParserRuleContext = None, invokingState: int = -1)

      Bases: :py:obj:`antlr4.ParserRuleContext`

      .. py:attribute:: __slots__
         :annotation: = parser

         

      .. py:method:: LPAREN(self)


      .. py:method:: query_expression(self, i: int = None)


      .. py:method:: RPAREN(self)


      .. py:method:: LSQBRACK(self)


      .. py:method:: IDENTIFIER(self)


      .. py:method:: RSQBRACK(self)


      .. py:method:: string_literal(self)


      .. py:method:: query_relation(self)


      .. py:method:: getRuleIndex(self)


      .. py:method:: accept(self, visitor: antlr4.ParseTreeVisitor)



   .. py:attribute:: grammarFileName
      :annotation: = HybLang.g4

      

   .. py:attribute:: atn
      

      

   .. py:attribute:: decisionsToDFA
      

      

   .. py:attribute:: sharedContextCache
      

      

   .. py:attribute:: literalNames
      :annotation: = ['<INVALID>', "'+'", "'-'", "'*'", "'/'", "'xor'", "'&'", "'||'", "'^'", "'is'", "'return'",...

      

   .. py:attribute:: symbolicNames
      :annotation: = ['<INVALID>', '<INVALID>', '<INVALID>', '<INVALID>', '<INVALID>', '<INVALID>', '<INVALID>',...

      

   .. py:attribute:: RULE_program
      :annotation: = 0

      

   .. py:attribute:: RULE_bin_op
      :annotation: = 1

      

   .. py:attribute:: RULE_identifier
      :annotation: = 2

      

   .. py:attribute:: RULE_string_literal
      :annotation: = 3

      

   .. py:attribute:: RULE_function_call
      :annotation: = 4

      

   .. py:attribute:: RULE_expression
      :annotation: = 5

      

   .. py:attribute:: RULE_assignment
      :annotation: = 6

      

   .. py:attribute:: RULE_sample
      :annotation: = 7

      

   .. py:attribute:: RULE_return_stmt
      :annotation: = 8

      

   .. py:attribute:: RULE_statement
      :annotation: = 9

      

   .. py:attribute:: RULE_procedure
      :annotation: = 10

      

   .. py:attribute:: RULE_non_statement
      :annotation: = 11

      

   .. py:attribute:: RULE_set_lit
      :annotation: = 12

      

   .. py:attribute:: RULE_set_type
      :annotation: = 13

      

   .. py:attribute:: RULE_function_argument
      :annotation: = 14

      

   .. py:attribute:: RULE_function_arguments
      :annotation: = 15

      

   .. py:attribute:: RULE_function_def
      :annotation: = 16

      

   .. py:attribute:: RULE_block
      :annotation: = 17

      

   .. py:attribute:: RULE_if_stmt
      :annotation: = 18

      

   .. py:attribute:: RULE_call_prog_def
      :annotation: = 19

      

   .. py:attribute:: RULE_exposing_sequence
      :annotation: = 20

      

   .. py:attribute:: RULE_library_def
      :annotation: = 21

      

   .. py:attribute:: RULE_query_statement
      :annotation: = 22

      

   .. py:attribute:: RULE_show_query_statement
      :annotation: = 23

      

   .. py:attribute:: RULE_write_query_statement
      :annotation: = 24

      

   .. py:attribute:: RULE_query_relation
      :annotation: = 25

      

   .. py:attribute:: RULE_query_expression
      :annotation: = 26

      

   .. py:attribute:: ruleNames
      :annotation: = ['program', 'bin_op', 'identifier', 'string_literal', 'function_call', 'expression',...

      

   .. py:attribute:: EOF
      

      

   .. py:attribute:: T__0
      :annotation: = 1

      

   .. py:attribute:: T__1
      :annotation: = 2

      

   .. py:attribute:: T__2
      :annotation: = 3

      

   .. py:attribute:: T__3
      :annotation: = 4

      

   .. py:attribute:: T__4
      :annotation: = 5

      

   .. py:attribute:: T__5
      :annotation: = 6

      

   .. py:attribute:: T__6
      :annotation: = 7

      

   .. py:attribute:: T__7
      :annotation: = 8

      

   .. py:attribute:: T__8
      :annotation: = 9

      

   .. py:attribute:: T__9
      :annotation: = 10

      

   .. py:attribute:: T__10
      :annotation: = 11

      

   .. py:attribute:: T__11
      :annotation: = 12

      

   .. py:attribute:: T__12
      :annotation: = 13

      

   .. py:attribute:: T__13
      :annotation: = 14

      

   .. py:attribute:: T__14
      :annotation: = 15

      

   .. py:attribute:: T__15
      :annotation: = 16

      

   .. py:attribute:: T__16
      :annotation: = 17

      

   .. py:attribute:: T__17
      :annotation: = 18

      

   .. py:attribute:: T__18
      :annotation: = 19

      

   .. py:attribute:: T__19
      :annotation: = 20

      

   .. py:attribute:: T__20
      :annotation: = 21

      

   .. py:attribute:: T__21
      :annotation: = 22

      

   .. py:attribute:: T__22
      :annotation: = 23

      

   .. py:attribute:: T__23
      :annotation: = 24

      

   .. py:attribute:: T__24
      :annotation: = 25

      

   .. py:attribute:: T__25
      :annotation: = 26

      

   .. py:attribute:: T__26
      :annotation: = 27

      

   .. py:attribute:: T__27
      :annotation: = 28

      

   .. py:attribute:: T__28
      :annotation: = 29

      

   .. py:attribute:: T__29
      :annotation: = 30

      

   .. py:attribute:: T__30
      :annotation: = 31

      

   .. py:attribute:: T__31
      :annotation: = 32

      

   .. py:attribute:: IDENTIFIER
      :annotation: = 33

      

   .. py:attribute:: NUMBER
      :annotation: = 34

      

   .. py:attribute:: NEWLINE
      :annotation: = 35

      

   .. py:attribute:: WS
      :annotation: = 36

      

   .. py:attribute:: LINE_COMMENT
      :annotation: = 37

      

   .. py:attribute:: SET_LIT
      :annotation: = 38

      

   .. py:attribute:: LPAREN
      :annotation: = 39

      

   .. py:attribute:: RPAREN
      :annotation: = 40

      

   .. py:attribute:: LBRACK
      :annotation: = 41

      

   .. py:attribute:: RBRACK
      :annotation: = 42

      

   .. py:attribute:: ASSIGN
      :annotation: = 43

      

   .. py:attribute:: SAMPLE
      :annotation: = 44

      

   .. py:attribute:: SEPARATOR
      :annotation: = 45

      

   .. py:attribute:: SEQSEP
      :annotation: = 46

      

   .. py:attribute:: BLOCKSTART
      :annotation: = 47

      

   .. py:attribute:: LSQBRACK
      :annotation: = 48

      

   .. py:attribute:: RSQBRACK
      :annotation: = 49

      

   .. py:attribute:: BIN_OP
      :annotation: = 50

      

   .. py:attribute:: STRING_LITERAL
      :annotation: = 51

      

   .. py:method:: program(self)


   .. py:method:: bin_op(self)


   .. py:method:: identifier(self)


   .. py:method:: string_literal(self)


   .. py:method:: function_call(self)


   .. py:method:: expression(self, _p: int = 0)


   .. py:method:: assignment(self)


   .. py:method:: sample(self)


   .. py:method:: return_stmt(self)


   .. py:method:: statement(self)


   .. py:method:: procedure(self)


   .. py:method:: non_statement(self)


   .. py:method:: set_lit(self)


   .. py:method:: set_type(self)


   .. py:method:: function_argument(self)


   .. py:method:: function_arguments(self)


   .. py:method:: function_def(self)


   .. py:method:: block(self)


   .. py:method:: if_stmt(self)


   .. py:method:: call_prog_def(self)


   .. py:method:: exposing_sequence(self)


   .. py:method:: library_def(self)


   .. py:method:: query_statement(self)


   .. py:method:: show_query_statement(self)


   .. py:method:: write_query_statement(self)


   .. py:method:: query_relation(self)


   .. py:method:: query_expression(self, _p: int = 0)


   .. py:method:: sempred(self, localctx: antlr4.RuleContext, ruleIndex: int, predIndex: int)


   .. py:method:: expression_sempred(self, localctx: ExpressionContext, predIndex: int)


   .. py:method:: query_expression_sempred(self, localctx: Query_expressionContext, predIndex: int)



